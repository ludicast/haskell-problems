import Data.List

-- 1) 
-- sum [x|x <- [1..1000], (x `mod` 3 == 0 or x `mod` 5 == 0) ]
-- 234168


-- 2)
fib 1 = 1
fib 2 = 2
fib n = fib (n - 1) + fib (n - 2)

fibs = sum . filter even . takeWhile (<=4000000) . map fib $ [1..]
-- 4613732

-- 3)


primes (x:xs) =
	x:primes (filter indivisible xs)
		where
			indivisible n = n `mod` x /= 0

genPrimes = primes [2..]




getDivisorList n = takeWhile (\x -> x < n ) genPrimes

divBy num divisor list = 
	if num `mod` divisor == 0 
		then 
			let newNum = num `div` divisor in
				divBy newNum divisor (divisor:list)
		else
			(num, list)
	
divisors n =
	case divisorList n of
		(1, list) -> list
		(n, []) -> [n]
	where
		divisorList n = foldl (\(value, list) prime -> divBy value prime list) (n, []) (getDivisorList n)

-- 4)

palindrome xs = reverse xs == xs

pals = (map (\x -> read x :: Int) . filter palindrome . map show) [ x * y | x <- [100..999], y <- [100..999]]

largestPal = last pals
-- 580085

-- 5)

divLists = map divisors [2..20]
compacted = sort . concat $ map group divLists

smallestDividedBy20 = product $ foldr1 (\nums acc -> if head nums == head acc then acc else nums ++ acc) compacted

-- 232792560

-- 6)

sumOfSquares n = sum $ (map (^2)) [1..n]
squareOfSums n = sum [1..n] * sum [1..n]

diffFirst100 = map (\n -> squareOfSums n - sumOfSquares n) [1..100]

-- 0,4,22,70,170,350,644,1092,1740,2640,3850,5434,7462,10010,13160,17000,21624,27132,33630,41230,50050,60214,71852,85100,100100,117000,135954,157122,180670,206770,235600,267344,302192,340340,381990,427350,476634,530062,587860,650260,717500,789824,867482,950730,1039830,1135050,1236664,1344952,1460200,1582700,1712750,1850654,1996722,2151270,2314620,2487100,2669044,2860792,3062690,3275090,3498350,3732834,3978912,4236960,4507360,4790500,5086774,5396582,5720330,6058430,6411300,6779364,7163052,7562800,7979050,8412250,8862854,9331322,9818120,10323720,10848600,11393244,11958142,12543790,13150690,13779350,14430284,15104012,15801060,16521960,17267250,18037474,18833182,19654930,20503280,21378800,22282064,23213652,24174150,25164150]

-- 7)

-- last $ take 10001 $ genPrimes             104743
--

-- 8)

bigNum = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

bigNumChars = show bigNum

splitInFives = map (\i -> take 5 $ drop i bigNumChars)

fiveBys =  (map (\x -> map (\char -> read [char]::Int) x) .  splitInFives) [0..995]

biggest = last . sort $ map product fiveBys
-- 40824

-- 9) 
(tripleta, tripletb, tripletc) = head [(a,b,c) | a <- [1..1000], b <- [(a + 1)..1000], c <- [(b + 1)..1000], a + b + c == 1000, a^2 + b^2 == c^2]

triplet = tripleta * tripletb * tripletc
-- 31875000

-- 10)
sum $ takeWhile (<2000000) genPrimes
142913828922
